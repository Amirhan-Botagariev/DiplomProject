services:
  pg:
    build:
      context: ./sys/postgres
    container_name: pg
    env_file:
      - sys/env/.env.db
      - sys/env/.env.common
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    restart: always
    networks:
      - platform
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB" ]
      interval: 10s
      timeout: 5s
      retries: 5

  maildev:
    image: maildev/maildev
    container_name: mail_developer
    env_file:
      - sys/env/.env.common
    ports:
      - "8081:1080"
      - "1025:1025"
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
    restart: unless-stopped
    networks:
      - platform

  adminer:
    image: adminer
    container_name: adminer
    depends_on:
      - pg
    env_file:
      - sys/env/.env.db
      - sys/env/.env.common
    ports:
      - "8082:8080"
    restart: unless-stopped
    networks:
      - platform

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    depends_on:
      - pg
    env_file:
      - sys/env/.env.pgadmin
      - sys/env/.env.db
      - sys/env/.env.common
    ports:
      - "5050:80"
    restart: unless-stopped
    networks:
      - platform

  platform:
    build:
      context: .
      dockerfile: sys/gunicorn/Dockerfile
    container_name: app
    depends_on:
      pg:
        condition: service_healthy
    volumes:
      - ./platform_backend:/platform/platform_backend
    working_dir: /platform/platform_backend
    env_file:
      - sys/env/.env.backend
      - sys/env/.env.db
      - sys/env/.env.common
      - sys/env/.env.metabase
    ports:
      - "8000:8000"
    restart: on-failure
    networks:
      - platform
    command: [ "/start.sh" ]

#  frontend:
#    build:
#      context: .
#      dockerfile: sys/frontend/Dockerfile
#    container_name: frontend
#    depends_on:
#      - platform
#    env_file:
#      - sys/env/.env.frontend
#      - sys/env/.env.common
#    ports:
#      - "5174:80"
#    networks:
#      - platform

  frontend-dev:
    image: node:20
    container_name: frontend-dev
    working_dir: /app
    volumes:
      - ./platform_frontend:/app
    command: sh -c "npm install && npm run dev -- --host"
    environment:
      - CHOKIDAR_USEPOLLING=true
      - CHOKIDAR_INTERVAL=100
    env_file:
      - sys/env/.env.frontend
      - sys/env/.env.common
    ports:
      - "5173:5173"
    networks:
      - platform

  metabase:
    build:
      context: .
      dockerfile: sys/metabase/Dockerfile
    container_name: metabase
    depends_on:
      - pg
    env_file:
      - sys/env/.env.db
      - sys/env/.env.common
      - sys/env/.env.metabase_docker
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
      - platform

volumes:
  pg_data:

networks:
  platform:
    driver: bridge