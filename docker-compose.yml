services:
  pg:
    build:
      context: ./sys/postgres
    container_name: pg
    env_file:
      - sys/env/.env.db
      - sys/env/.env.common
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    restart: always
    networks:
      - platform

  maildev:
    image: maildev/maildev
    container_name: mail_developer
    env_file:
      - sys/env/.env.common
    ports:
      - "8081:1080"
      - "1025:1025"
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
    restart: unless-stopped
    networks:
      - platform

  adminer:
    image: adminer
    container_name: adminer
    depends_on:
      - pg
    env_file:
      - sys/env/.env.db
      - sys/env/.env.common
    ports:
      - "8082:8080"
    restart: unless-stopped
    networks:
      - platform

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    depends_on:
      - pg
    env_file:
      - sys/env/.env.pgadmin
      - sys/env/.env.db
      - sys/env/.env.common
    ports:
      - "5050:80"
    restart: unless-stopped
    networks:
      - platform

  platform:
    build:
      context: .
      dockerfile: sys/gunicorn/Dockerfile
    container_name: app
    depends_on:
      - pg
    volumes:
      - .:/platform
    working_dir: /platform/platform_backend
    command: [ "/bin/sh", "-c", "poetry run alembic -c alembic.ini upgrade head && poetry run python run_main.py" ]
    env_file:
      - sys/env/.env.backend
      - sys/env/.env.db
      - sys/env/.env.common
      - sys/env/.env.metabase
    ports:
      - "8000:8000"
    restart: on-failure
    networks:
      - platform

  frontend:
    build:
      context: .
      dockerfile: sys/frontend/Dockerfile
    container_name: frontend
    depends_on:
      - platform
    env_file:
      - sys/env/.env.frontend
      - sys/env/.env.common
    ports:
      - "5173:80"
    networks:
      - platform

  frontend-dev:
    image: node:20
    container_name: frontend-dev
    working_dir: /app
    volumes:
      - ./platform_frontend:/app
    command: sh -c "npm install && npm run dev -- --host"
    env_file:
      - sys/env/.env.frontend
      - sys/env/.env.common
    ports:
      - "5173:5173"
    networks:
      - platform

  metabase:
    build:
      context: .
      dockerfile: sys/metabase/Dockerfile
    container_name: metabase
    depends_on:
      - pg
    environment:
      MB_EMBEDDING_SECRET_KEY: ${APP_CONFIG_METABASE__EMBEDDING_SECRET_KEY}
      MB_DB_TYPE: ${APP_CONFIG_METABASE__DB_TYPE}
      MB_DB_DBNAME: ${APP_CONFIG_METABASE__DB_DBNAME}
      MB_DB_PORT: ${APP_CONFIG_METABASE__DB_PORT}
      MB_DB_USER: ${APP_CONFIG_METABASE__DB_USER}
      MB_DB_PASS: ${APP_CONFIG_METABASE__DB_PASS}
      MB_DB_HOST: ${APP_CONFIG_METABASE__DB_HOST}
      MB_ANON_TRACKING_ENABLED: ${APP_CONFIG_METABASE__ANON_TRACKING_ENABLED}
    env_file:
      - sys/env/.env.db
      - sys/env/.env.common
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
      - platform

volumes:
  pg_data:

networks:
  platform:
    driver: bridge