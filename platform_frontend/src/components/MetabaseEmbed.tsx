import { useEffect, useState } from "react";

type Props = {
  dashboardId: number;
  question_id: number;
  height?: number;
};

const backendUrl = import.meta.env.VITE_BACKEND_URL;

const MetabaseEmbed = ({ dashboardId, question_id, height = 500 }: Props) => {
  const [embedUrl, setEmbedUrl] = useState<string | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchEmbedUrl = async () => {
      setLoading(true);

      try {
        const params = new URLSearchParams({
          dashboard_id: dashboardId.toString(),
          question_id: question_id.toString(),
        });

        const response = await fetch(`${backendUrl}/api/v1/metabase/dashboard-url?${params}`, {
          method: "GET",
          headers: {
            "Accept": "application/json",
            "Cache-Control": "no-cache",
            // –ï—Å–ª–∏ –Ω—É–∂–µ–Ω —Ç–æ–∫–µ–Ω ‚Äî —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π:
            // "Authorization": `Bearer ${localStorage.getItem("access_token") || ""}`,
          },
        });

        const contentType = response.headers.get("content-type");

        const rawText = await response.text();
        console.log("üì¶ –°—Ç–∞—Ç—É—Å:", response.status);
        console.log("üìë Content-Type:", contentType);
        console.log("üìÑ Raw response:", rawText.slice(0, 300));

        if (!response.ok) {
          console.error("‚ùå –û—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞");
          return;
        }

        if (!contentType?.includes("application/json")) {
          console.error("‚ùå –û–∂–∏–¥–∞–ª—Å—è JSON, –Ω–æ –ø–æ–ª—É—á–µ–Ω–æ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ");
          return;
        }

        const data = JSON.parse(rawText);
        setEmbedUrl(data.embed_url);
        console.log("‚úÖ –î—ç—à–±–æ—Ä–¥ –ø–æ–ª—É—á–µ–Ω");
      } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Metabase URL:", err);
      } finally {
        setLoading(false);
      }
    };

    fetchEmbedUrl();
  }, [dashboardId, question_id]);

  if (loading) return <p className="text-sm">–ó–∞–≥—Ä—É–∑–∫–∞ Metabase –¥—ç—à–±–æ—Ä–¥–∞...</p>;
  if (!embedUrl) return <p className="text-sm text-red-500">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—ç—à–±–æ—Ä–¥</p>;

  return (
    <iframe
      src={embedUrl}
      frameBorder="0"
      width="100%"
      height={height}
      allowTransparency
      title={`Metabase Dashboard #${dashboardId}`}
    />
  );
};

export default MetabaseEmbed;